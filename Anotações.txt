uniforme é um parâmetro global

TRANSFORMAÇÕES
Transformações são realizadas no shader
slide 14 das transformações, o código final faz a transformação de "glm" para "mat4" que é a matriz qu é enviada para o vertex shader, conforme o slide 12 (envia pelo "matrix")

TEXTURA
Slide 5 
GL_RGBA -> jpeg não tem o "A"(alpha)
GL_BGRA_EXT -> passar GL_RGBA

Slide 13
8*sizeof(float), -> o quanto vai pular
(void*)(3*sizeof(float) - > começa da posição 3

2 vao, um para cada imagem
Draw arrays desenha o fundo, draw arrays desenha o avião

MAPEAMENTO DE TEXTURA ABORDAGEM PRÁTICA
Um VAO para todas as camadas, só precisa trocar a textura o objeto que representa o tamanho da tela continua igual, desenar o mesmo objeto para todas as texturas

glEnable(GL_DEPTH_TEST); - Testar a profundidade 
glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); - Limpar o Buffer para desenhar corretamente as texturas


glBindVertexArray(VAO);
for (int i = 0; i < 4; i++) {
    glUniform1f(
 glGetUniformLocation(shader_programme, "offsetx"), layers[i]->offsetx);
    glUniform1f(
 glGetUniformLocation(shader_programme, "offsety"), layers[i]->offsety);
    glUniform1f(
 glGetUniformLocation(shader_programme, "layer_z"), layers[i]->z);
    // bind Texture
    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D, layers[i]->tid);
    glUniform1i(glGetUniformLocation(shader_programme, "sprite"), 0);
    glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);
}

Especifica o quão mais vai ser somado em x e y e o ponto em z que vai ser desenhado conforme a "layer" (um array)

Setar o parâmetro "GL_REPEAT" para a textura ser exibida várias vezes em sequência

SLIDE DE CAMERA 2D
glm::ortho(0.0f, 800.0f, 600.0f, 0.0f, 0.1f, 100.0f); - Para ficarem coerentes as posições de tela e do OpenGL
glViewport(0.0f, 0.0f, 800.0f, 600.0f); - Pixeis da tela


Definir o tamanho da tela
Criar a classe layer (textura, deslocamento)
Fazer funcionar multiplas texturas
Scroling das camadas
